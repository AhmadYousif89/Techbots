generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkUserId String   @unique @map("clerk_user_id")
  email       String   @unique
  username    String?  @default("Anonymous")
  imageUrl    String?
  Cart        Cart?
  Order       Order[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Cart {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  clerkUserId String    @unique @map("clerk_user_id")
  products    Product[]
  count       Int
  total       Float
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("carts")
}

model Order {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  clerkUserId  String      @unique @map("clerk_user_id")
  shippingInfo Json        @map("shipping_info")
  pricePaid    Float       @map("price_paid")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  orderItems   OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  product     Product @relation(fields: [productAsin], references: [asin], onDelete: Cascade)
  productAsin String  @map("product_asin")
  count       Int

  @@map("order_items")
}

model Product {
  id                 String          @id @default(cuid())
  asin               String          @unique
  title              String
  brand              String
  color              String?
  price              Int
  category           String
  description        String?
  rating             Float
  ratingsTotal       Int             @map("ratings_total")
  ratingBreakdown    Json            @map("rating_breakdown")
  mainImage          String          @map("main_image")
  imagesCount        Int             @map("images_count")
  specificationsFlat String?         @map("specifications_flat")
  featureBulletsFlat String?         @map("feature_bullets_flat")
  stockQuantity      Int             @map("stock_quantity")
  Cart               Cart?           @relation(fields: [cartId], references: [id], onDelete: SetNull)
  cartId             String?         @map("cart_id")
  images             ProductImages[]
  topReviews         Review[]
  orderItems         OrderItem[]
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")

  @@map("products")
}

model ProductImages {
  id          String   @id @default(cuid())
  link        String
  variant     String
  product     Product? @relation(fields: [productAsin], references: [asin], onDelete: Restrict)
  productAsin String?  @map("product_asin")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("product_images")
}

model Review {
  id            String   @id
  title         String
  product       Product  @relation(fields: [asin], references: [asin], onDelete: Restrict)
  asin          String
  body          String
  bodyHtml      String   @map("body_html")
  link          String
  rating        Float
  date          Json
  profile       Json?
  reviewCountry String   @map("review_country")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("reviews")
}
